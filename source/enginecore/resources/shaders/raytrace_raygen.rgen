#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#include "random.glsl"
#include "raytrace_struct.glsl"
#include "raytrace_utils.glsl"

layout(location = 0) rayPayloadEXT RayPayload rayPayload;

layout(set = 0,
       binding = 0) uniform accelerationStructureEXT topLevelAccelStruct;
layout(set = 0, binding = 1, rgba8) uniform image2D outputImage;
layout(set = 0, binding = 2) uniform CameraProperties {
  mat4 viewInverse;
  mat4 projInverse;
  int frameId;
  int showAOImage;
}
camProps;

layout(set = 0, binding = 3, rgba32f) uniform image2D accumulationImage;

void main() {
  const uint samplesPerPixel = MAX_SAMPLES;

  uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchIDEXT.x + gl_LaunchIDEXT.x,
                  camProps.frameId);

  vec3 finalOutColor = vec3(0);

  for (uint i = 0; i < samplesPerPixel; ++i) {
    vec3 pathColor = vec3(0);

    const float rand1 = rand(seed);
    const float rand2 = rand(seed);

    const vec2 jitter = vec2(rand1, rand2);

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) + jitter;
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 ndc = inUV * 2.0 - 1.0;

    vec4 origin = camProps.viewInverse * vec4(0, 0, 0, 1);
    vec4 target = camProps.projInverse * vec4(ndc.x, ndc.y, 1, 1);
    vec4 direction =
        camProps.viewInverse * vec4(normalize(target.xyz / target.w), 0);

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;

    rayPayload.seed = seed;

    rayPayload.currentBounceIndex = 0;
    rayPayload.exit = false;
    rayPayload.throughput = vec3(1.0);
    rayPayload.radiance = vec3(0.0);
    rayPayload.origin = origin.xyz;
    rayPayload.direction = direction.xyz;
    rayPayload.ao = vec3(0.0) * MAX_SAMPLES;
    rayPayload.isCameraRay = true;

    for (int j = 0; j < MAX_BOUNCES; ++j) {
      rayPayload.currentBounceIndex = j;

      traceRayEXT(topLevelAccelStruct, rayFlags, cullMask, 0, 0, 0,
                  rayPayload.origin.xyz, tmin, rayPayload.direction.xyz, tmax,
                  0);

      if (rayPayload.exit) {
        break;
      }
    }

    pathColor = rayPayload.radiance;

    // some magic to remove fireflies
    float lum = dot(pathColor, vec3(0.212671f, 0.715160f, 0.072169f));
    if (lum > 45.7) {
      pathColor *= 45.7 / lum;
    }

    finalOutColor += pathColor;
    if (camProps.showAOImage != 0) {
      finalOutColor = rayPayload.ao;
    }
  }

  finalOutColor /= float(samplesPerPixel);

  vec4 loadPrevColor =
      camProps.frameId > 0
          ? imageLoad(accumulationImage, ivec2(gl_LaunchIDEXT.xy))
          : vec4(0.0);
  vec3 accumulatedColor = loadPrevColor.xyz + finalOutColor;

  imageStore(accumulationImage, ivec2(gl_LaunchIDEXT.xy),
             vec4(accumulatedColor, 1.0));

  if (camProps.frameId > 0) {
    float inv = 1.f / float(camProps.frameId);
    // Comment this if you want to see noise, accumulation reduces noise
    finalOutColor = accumulatedColor * inv;
  }

  imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy),
             vec4(linear2sRGB(finalOutColor), 0.0));
}
